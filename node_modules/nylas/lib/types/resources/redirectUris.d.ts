import { AsyncListResponse, Resource } from './resource.js';
import { NylasBaseResponse, NylasResponse, NylasListResponse } from '../models/response.js';
import { CreateRedirectUriRequest, RedirectUri, UpdateRedirectUriRequest } from '../models/redirectUri.js';
import { Overrides } from '../config.js';
/**
 * @property redirectUriId The id of the Redirect URI to retrieve.
 */
export interface FindRedirectUrisParams {
    redirectUriId: string;
}
/**
 * @property requestBody The values to create the Redirect URI with.
 */
export interface CreateRedirectUrisParams {
    requestBody: CreateRedirectUriRequest;
}
/**
 * @property redirectUriId The id of the Redirect URI to update.
 * @property requestBody The values to update the Redirect URI with.
 */
export interface UpdateRedirectUrisParams {
    redirectUriId: string;
    requestBody: UpdateRedirectUriRequest;
}
/**
 * @property redirectUriId The id of the Redirect URI to delete.
 */
export interface DestroyRedirectUrisParams {
    redirectUriId: string;
}
/**
 * A collection of redirect URI related API endpoints.
 *
 * These endpoints allows for the management of redirect URIs.
 */
export declare class RedirectUris extends Resource {
    /**
     * Return all Redirect URIs
     * @return The list of Redirect URIs
     */
    list({ overrides }?: Overrides): AsyncListResponse<NylasListResponse<RedirectUri>>;
    /**
     * Return a Redirect URI
     * @return The Redirect URI
     */
    find({ redirectUriId, overrides, }: FindRedirectUrisParams & Overrides): Promise<NylasResponse<RedirectUri>>;
    /**
     * Create a Redirect URI
     * @return The created Redirect URI
     */
    create({ requestBody, overrides, }: CreateRedirectUrisParams & Overrides): Promise<NylasResponse<RedirectUri>>;
    /**
     * Update a Redirect URI
     * @return The updated Redirect URI
     */
    update({ redirectUriId, requestBody, overrides, }: UpdateRedirectUrisParams & Overrides): Promise<NylasResponse<RedirectUri>>;
    /**
     * Delete a Redirect URI
     * @return The deleted Redirect URI
     */
    destroy({ redirectUriId, overrides, }: DestroyRedirectUrisParams & Overrides): Promise<NylasResponse<NylasBaseResponse>>;
}
